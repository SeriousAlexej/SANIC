#ifdef VERTEX_SHADER

in vec3 vertexPosition_modelspace;
in vec2 vertexUV;
in vec3 vertexPosition_interpolation;

out vec2 UV;

uniform mat4 P;
uniform mat4 V;
uniform mat4 M;
uniform float frameProgress;
uniform vec2 uvTilingD;

uniform vec3 cameraPosition;
out float fade;

void main(){
	gl_Position =  P * V * M * vec4(mix(vertexPosition_modelspace,vertexPosition_interpolation,(0.5-cos(frameProgress * 3.1415926535897932384626433832795)*0.5)), 1);
	UV = vec2(vertexUV.x * uvTilingD.x, vertexUV.y * uvTilingD.y);
//random shit....
	fade = cameraPosition.x;
}

#endif
#ifdef FRAGMENT_SHADER

in lowp vec2 UV;
in lowp float fade;

out lowp vec4 color;

uniform sampler2D DiffuseTextureSampler;
uniform bool overlayBool;
uniform lowp float translucencyAlpha;
uniform lowp float useImageAlpha;

void main(){
	lowp vec4 MaterialDiffuseColor = texture( DiffuseTextureSampler, UV ).rgba;
	if(MaterialDiffuseColor.a < 0.5 || overlayBool)
	{
		discard;
	}
//random shit....
	color = vec4(0.0, 0.0, 1.0, min(translucencyAlpha * useImageAlpha, fade));
}

#endif
